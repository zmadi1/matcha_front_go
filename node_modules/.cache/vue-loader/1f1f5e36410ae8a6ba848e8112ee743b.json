{"remainingRequest":"/home/zakhele/go/src/github.com/gmohlamo/matcha-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/zakhele/go/src/github.com/gmohlamo/matcha-front/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/zakhele/go/src/github.com/gmohlamo/matcha-front/src/App.vue","mtime":1578643202699},{"path":"/home/zakhele/go/src/github.com/gmohlamo/matcha-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zakhele/go/src/github.com/gmohlamo/matcha-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/zakhele/go/src/github.com/gmohlamo/matcha-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zakhele/go/src/github.com/gmohlamo/matcha-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex'\nimport axios from 'axios'\n\nexport default {\n  name: 'app',\n  data(){\n    return {\n    }\n  },\n  computed: {\n    ...mapState([\n      'loggedIn'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n      'addCoords',\n      'logOut',\n      'userAuth',\n      'getUserData'\n    ]),\n    logUserOut(){\n      this.logOut()\n      location.href = location.protocol + '//' + location.host + '/#/auth'\n    }\n  },\n  mounted: function() {\n    fetch('https://ipinfo.io/json')\n    .then(res => {return res.json()})\n    .then(myJson => {\n      console.log(myJson)\n      try {\n        this.addCoords(myJson.loc.split(',').map(Number).reverse())\n\t  }\n      catch(error) {\n\t    console.log(\"Failed to get ip address geolocation\")\n\t  }\n      if (this.loggedIn == false) {\n        location.href = location.protocol + '//' + location.host + '/#/auth'\n      }\n    }).catch(err => console.log(err))\n    if (this.loggedIn == false) {\n      if (localStorage.token == \"\") {\n        location.href = location.protocol + '//' + location.host + '/#/auth'\n        return\n      } else {\n        axios.defaults.headers.common[\"Authorization\"] = localStorage.token\n        axios.get(\"http://localhost:4040/users/check\")\n        .then(resp => {\n          return resp.data\n        })\n        .then(data => {\n          if (data.success) {\n            this.userAuth()\n            this.getUserData()\n            location.href = location.protocol + '//' + location.host + '/#/'\n          }\n        })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <nav class=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div class=\"navbar-brand\">\n        <a role=\"button\" class=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n      <div class=\"navbar-menu\">\n        <div class=\"navbar-start\">\n          <router-link class=\"navbar-item\" to=\"/\" v-if=\"loggedIn\">Home</router-link>\n          <router-link class=\"navbar-item\" to=\"/auth\" v-if=\"!loggedIn\">Auth</router-link>\n          <router-link class=\"navbar-item\" to=\"/profile\" v-if=\"loggedIn\">Profile</router-link>\n        </div>\n        <div class=\"navbar-end\">\n          <a class=\"navbar-item\" v-if=\"loggedIn\" v-on:click=\"logUserOut()\">Logout</a>\n        </div>\n      </div>\n    </nav>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex'\nimport axios from 'axios'\n\nexport default {\n  name: 'app',\n  data(){\n    return {\n    }\n  },\n  computed: {\n    ...mapState([\n      'loggedIn'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n      'addCoords',\n      'logOut',\n      'userAuth',\n      'getUserData'\n    ]),\n    logUserOut(){\n      this.logOut()\n      location.href = location.protocol + '//' + location.host + '/#/auth'\n    }\n  },\n  mounted: function() {\n    fetch('https://ipinfo.io/json')\n    .then(res => {return res.json()})\n    .then(myJson => {\n      console.log(myJson)\n      try {\n        this.addCoords(myJson.loc.split(',').map(Number).reverse())\n\t  }\n      catch(error) {\n\t    console.log(\"Failed to get ip address geolocation\")\n\t  }\n      if (this.loggedIn == false) {\n        location.href = location.protocol + '//' + location.host + '/#/auth'\n      }\n    }).catch(err => console.log(err))\n    if (this.loggedIn == false) {\n      if (localStorage.token == \"\") {\n        location.href = location.protocol + '//' + location.host + '/#/auth'\n        return\n      } else {\n        axios.defaults.headers.common[\"Authorization\"] = localStorage.token\n        axios.get(\"http://localhost:4040/users/check\")\n        .then(resp => {\n          return resp.data\n        })\n        .then(data => {\n          if (data.success) {\n            this.userAuth()\n            this.getUserData()\n            location.href = location.protocol + '//' + location.host + '/#/'\n          }\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style>\nbody {\n  padding: 0px;\n  border: 0px;\n}\n</style>\n"]}]}